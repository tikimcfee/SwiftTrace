// Generated by Apple Swift version 5.2.4 (swiftlang-1103.0.32.9 clang-1103.0.32.53)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="SwiftTrace",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif




SWIFT_CLASS_NAMED("SwiftMeta")
@interface SwiftMeta : NSObject
/// Convert a executable symbol name “mangled” according to Swift’s
/// conventions into a human readable Swift language form
+ (NSString * _Nullable)demangleWithSymbol:(int8_t const * _Nonnull)symbol SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class Swizzle;

/// Base class for SwiftTrace api through it’s public class methods
SWIFT_CLASS_NAMED("SwiftTrace")
@interface SwiftTrace : NSObject
/// Format for ms of time spend in method
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull timeFormat;)
+ (NSString * _Nonnull)timeFormat SWIFT_WARN_UNUSED_RESULT;
+ (void)setTimeFormat:(NSString * _Nonnull)value;
/// Format for idenifying class instance
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull identifyFormat;)
+ (NSString * _Nonnull)identifyFormat SWIFT_WARN_UNUSED_RESULT;
+ (void)setIdentifyFormat:(NSString * _Nonnull)value;
/// Indentation amongst different call levels on the stack
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull traceIndent;)
+ (NSString * _Nonnull)traceIndent SWIFT_WARN_UNUSED_RESULT;
+ (void)setTraceIndent:(NSString * _Nonnull)value;
/// Class used to create “Sizzle” instances representing a member function
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) SWIFT_METATYPE(Swizzle) _Nonnull swizzleFactory;)
+ (SWIFT_METATYPE(Swizzle) _Nonnull)swizzleFactory SWIFT_WARN_UNUSED_RESULT;
+ (void)setSwizzleFactory:(SWIFT_METATYPE(Swizzle) _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) SwiftTrace * _Nonnull lastSwiftTrace;)
+ (SwiftTrace * _Nonnull)lastSwiftTrace SWIFT_WARN_UNUSED_RESULT;
+ (void)setLastSwiftTrace:(SwiftTrace * _Nonnull)value;
/// Returns a pointer to the interposed dictionary. Required to
/// ensure only one interposed dictionary us used if the user
/// includes SwiftTrace as a package or pod in their project.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) void * _Nonnull interposedPointer;)
+ (void * _Nonnull)interposedPointer SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL isTracing;)
+ (BOOL)isTracing SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithPrevious:(SwiftTrace * _Nullable)previous subLevels:(NSInteger)subLevels OBJC_DESIGNATED_INITIALIZER;
+ (SwiftTrace * _Nonnull)startNewTraceWithSubLevels:(NSInteger)subLevels;
- (void)mutePreviousUnfiltered;
/// Default pattern of common/problematic symbols to be excluded from tracing
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull defaultMethodExclusions;)
+ (NSString * _Nonnull)defaultMethodExclusions SWIFT_WARN_UNUSED_RESULT;
/// Exclude symbols matching this pattern. If not specified
/// a default pattern in swiftTraceDefaultExclusions is used.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable methodExclusionPattern;)
+ (NSString * _Nullable)methodExclusionPattern SWIFT_WARN_UNUSED_RESULT;
+ (void)setMethodExclusionPattern:(NSString * _Nullable)newValue;
/// Include symbols matching pattern only
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable methodInclusionPattern;)
+ (NSString * _Nullable)methodInclusionPattern SWIFT_WARN_UNUSED_RESULT;
+ (void)setMethodInclusionPattern:(NSString * _Nullable)newValue;
/// In order to be traced, symbol must be included and not excluded
/// \param symbol String representation of method
///
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) SWIFT_METATYPE(Swizzle) _Nullable (^ _Nonnull methodFilter)(NSString * _Nonnull);)
+ (SWIFT_METATYPE(Swizzle) _Nullable (^ _Nonnull)(NSString * _Nonnull))methodFilter SWIFT_WARN_UNUSED_RESULT;
+ (void)setMethodFilter:(SWIFT_METATYPE(Swizzle) _Nullable (^ _Nonnull)(NSString * _Nonnull))newValue;
/// Intercepts and tracess all classes linked into the bundle containing a class.
/// \param theClass the class to specify the bundle, nil implies caller bundle
///
/// \param subLevels levels of unqualified traces to show
///
+ (void)traceBundleWithContaining:(Class _Nullable)theClass subLevels:(NSInteger)subLevels;
/// Trace all user developed classes in the main bundle of an app
/// \param subLevels levels of unqualified traces to show
///
+ (void)traceMainBundleWithSubLevels:(NSInteger)subLevels;
/// Trace a classes defined in a specific bundlePath (executable image)
/// \param bundlePath Path to bundle to trace
///
/// \param subLevels levels of unqualified traces to show
///
+ (void)traceWithBundlePath:(int8_t const * _Nullable)bundlePath subLevels:(NSInteger)subLevels;
/// Lists Swift classes not inheriting from NSObject in an app or framework.
+ (NSArray<Class> * _Nonnull)swiftClassListWithBundlePath:(int8_t const * _Nullable)bundlePath SWIFT_WARN_UNUSED_RESULT;
/// Intercepts and tracess all classes with names matching regexp pattern
/// \param pattern regexp patten to specify classes to trace
///
/// \param subLevels levels of unqualified traces to show
///
+ (void)traceClassesMatchingPattern:(NSString * _Nonnull)pattern subLevels:(NSInteger)subLevels;
/// Underlying implementation of tracing an individual classs.
/// \param aClass the class, the methods of which to trace
///
+ (void)traceWithAClass:(Class _Nonnull)aClass;
/// Trace instances of a particular class including methods of superclass
/// \param aClass the class, the methods of which to trace
///
/// \param subLevels levels of unqualified traces to show
///
+ (void)traceInstancesOfClass:(Class _Nonnull)aClass subLevels:(NSInteger)subLevels;
/// Trace a particular instance only.
/// \param anInstance the class, the methods of which to trace
///
/// \param subLevels levels of unqualified traces to show
///
+ (void)traceWithAnInstance:(id _Nonnull)anInstance subLevels:(NSInteger)subLevels;
/// Determine if symbol name is injectable
/// \param symname Pointer to symbol name
///
///
/// returns:
/// Whether symbol should be patched
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) BOOL (^ _Nonnull injectableSymbol)(char const * _Nonnull);)
+ (BOOL (^ _Nonnull)(char const * _Nonnull))injectableSymbol SWIFT_WARN_UNUSED_RESULT;
+ (void)setInjectableSymbol:(BOOL (^ _Nonnull)(char const * _Nonnull))value;
/// Trace internal protocol witnesses in SwiftUI.
+ (void)traceSwiftUIProtocolsMatchingPattern:(NSString * _Nullable)matchingPattern subLevels:(NSInteger)subLevels;
/// Trace the protocol witnesses for a bundle containg the specified class
/// \param aClass the class contained in the bundle to trace
///
/// \param matchingPattern regex pattern to match entries against
///
/// \param subLevels subLevels to log of previous traces to trace
///
+ (void)traceProtocolsInBundleWithContaining:(Class _Nullable)aClass matchingPattern:(NSString * _Nullable)matchingPattern subLevels:(NSInteger)subLevels;
/// Trace the protocol witnesses for a bundle specifying the image path
/// \param inBundle Path to image the protocols of which to trace
///
/// \param matchingPattern regex pattern to match entries against
///
/// \param subLevels subLevels to log of previous traces to trace
///
+ (void)traceProtocolsInBundle:(int8_t const * _Nullable)inBundle matchingPattern:(NSString * _Nullable)matchingPattern subLevels:(NSInteger)subLevels;
/// follow chain of Sizzles through to find original implementataion
+ (Swizzle * _Nullable)originalSwizzleFor:(IMP _Nonnull)implementation SWIFT_WARN_UNUSED_RESULT;
/// Returns a list of all Swift methods as demangled symbols of a class
/// \param ofClass - class to be dumped
///
+ (NSArray<NSString *> * _Nonnull)methodNamesOfClass:(Class _Nonnull)ofClass SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)undoLastTrace SWIFT_WARN_UNUSED_RESULT;
/// Remove all swizzles applied until now
+ (void)removeAllTraces;
/// Remove all swizzles for this trace
- (void)removeSwizzles;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface SwiftTrace (SWIFT_EXTENSION(SwiftTrace))
@end




@interface SwiftTrace (SWIFT_EXTENSION(SwiftTrace))
/// Add a closure aspect to be called before or after a “Swizzle” is called
/// \param methodName - unmangled name of Method for aspect
///
+ (BOOL)removeAspectWithMethodName:(NSString * _Nonnull)methodName;
/// Add a closure aspect to be called before or after a “Swizzle” is called
/// \param aClass - specifying the class to remove aspect is more efficient
///
/// \param methodName - unmangled name of Method for aspect
///
+ (BOOL)removeAspectWithAClass:(Class _Nonnull)aClass methodName:(NSString * _Nonnull)methodName;
@end


@interface SwiftTrace (SWIFT_EXTENSION(SwiftTrace))
/// Accumulated amount of time spent in each swizzled method.
+ (NSDictionary<NSString *, NSNumber *> * _Nonnull)elapsedTimes SWIFT_WARN_UNUSED_RESULT;
/// Numbers of times each swizzled method has been invoked.
+ (NSDictionary<NSString *, NSNumber *> * _Nonnull)invocationCounts SWIFT_WARN_UNUSED_RESULT;
+ (NSArray<Swizzle *> * _Nonnull)callOrder SWIFT_WARN_UNUSED_RESULT;
@end


@interface SwiftTrace (SWIFT_EXTENSION(SwiftTrace))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) int32_t liveObjectsLock;)
+ (int32_t)liveObjectsLock SWIFT_WARN_UNUSED_RESULT;
+ (void)setLiveObjectsLock:(int32_t)value;
@end


@interface SwiftTrace (SWIFT_EXTENSION(SwiftTrace))
/// Function type suffixes at end of mangled symbol name
/// to interpose i.e. constructors, functions (methods),
/// getters of Opaque type (for SwiftUI body properties)
/// and setters and destructors.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSArray<NSString *> * _Nonnull swiftFunctionSuffixes;)
+ (NSArray<NSString *> * _Nonnull)swiftFunctionSuffixes SWIFT_WARN_UNUSED_RESULT;
+ (void)setSwiftFunctionSuffixes:(NSArray<NSString *> * _Nonnull)value;
/// Regexp pattern for functions to exclude from interposing
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) NSRegularExpression * _Nullable interposeEclusions;)
+ (NSRegularExpression * _Nullable)interposeEclusions SWIFT_WARN_UNUSED_RESULT;
+ (void)setInterposeEclusions:(NSRegularExpression * _Nullable)value;
+ (void const * _Nullable)interposedWithReplacee:(void const * _Nonnull)replacee SWIFT_WARN_UNUSED_RESULT;
/// Use interposing to trace all methods in a bundle
/// Requires “Other Linker Flags” -Xlinker -interposable
/// Filters using method include/exlxusion class vars.
/// \param inBundlePath path to bundle to interpose
///
/// \param packageName include only methods with prefix
///
/// \param subLevels not currently used
///
+ (NSInteger)interposeMethodsInBundlePath:(int8_t const * _Nonnull)inBundlePath packageName:(NSString * _Nullable)packageName subLevels:(NSInteger)subLevels SWIFT_WARN_UNUSED_RESULT;
/// Use interposing to trace all methods in main bundle
+ (NSInteger)traceMainBundleMethods SWIFT_WARN_UNUSED_RESULT;
/// Use interposing to trace all methods in a framework
/// Doesn’t actually require -Xlinker -interposable
/// \param aClass Class which the framework contains
///
+ (NSInteger)traceMethodsInFrameworkContaining:(Class _Nonnull)aClass SWIFT_WARN_UNUSED_RESULT;
/// Apply a trace to all methods in framesworks in app bundle
+ (NSInteger)traceFrameworkMethods SWIFT_WARN_UNUSED_RESULT;
/// Revert all previous interposes
+ (void)revertInterposes;
@end


@interface SwiftTrace (SWIFT_EXTENSION(SwiftTrace))
/// Hook to intercept all trace output
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) void (^ _Nonnull logOutput)(NSString * _Nonnull, void const * _Nullable, NSInteger);)
+ (void (^ _Nonnull)(NSString * _Nonnull, void const * _Nullable, NSInteger))logOutput SWIFT_WARN_UNUSED_RESULT;
+ (void)setLogOutput:(void (^ _Nonnull)(NSString * _Nonnull, void const * _Nullable, NSInteger))value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable traceFilterInclude;)
+ (NSString * _Nullable)traceFilterInclude SWIFT_WARN_UNUSED_RESULT;
+ (void)setTraceFilterInclude:(NSString * _Nullable)pattern;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable traceFilterExclude;)
+ (NSString * _Nullable)traceFilterExclude SWIFT_WARN_UNUSED_RESULT;
+ (void)setTraceFilterExclude:(NSString * _Nullable)pattern;
/// Map trampolines back to the original implementation swizzled
/// \param forTrampoline a function entry point
///
///
/// returns:
/// original implementation swizzled
+ (void * _Nullable)swizzledForTrampoline:(void * _Nonnull)forTrampoline SWIFT_WARN_UNUSED_RESULT;
@end


@interface SwiftTrace (SWIFT_EXTENSION(SwiftTrace))
/// Enable auto decoration of unknown types
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL typeLookup;)
+ (BOOL)typeLookup SWIFT_WARN_UNUSED_RESULT;
+ (void)setTypeLookup:(BOOL)value;
/// Decorating “Any” is not fully understood.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL decorateAny;)
+ (BOOL)decorateAny SWIFT_WARN_UNUSED_RESULT;
+ (void)setDecorateAny:(BOOL)value;
/// A “pagmatic” limit on the size of structs that will be decorated
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) NSInteger maxIntegerArgumentSlots;)
+ (NSInteger)maxIntegerArgumentSlots SWIFT_WARN_UNUSED_RESULT;
+ (void)setMaxIntegerArgumentSlots:(NSInteger)value;
/// A limit on argument description size
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) NSInteger maxArgumentDescriptionBytes;)
+ (NSInteger)maxArgumentDescriptionBytes SWIFT_WARN_UNUSED_RESULT;
+ (void)setMaxArgumentDescriptionBytes:(NSInteger)value;
/// Default pattern of type names to be excluded from decoration
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull defaultLookupExclusions;)
+ (NSString * _Nonnull)defaultLookupExclusions SWIFT_WARN_UNUSED_RESULT;
/// Exclude types with name matching this pattern. If not specified
/// a default regular expression in defaultLookupExclusions is used.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable lookupExclusionPattern;)
+ (NSString * _Nullable)lookupExclusionPattern SWIFT_WARN_UNUSED_RESULT;
+ (void)setLookupExclusionPattern:(NSString * _Nullable)newValue;
/// Prevent a type fom being decorated
+ (void)makeUntracableWithTypesNamed:(NSArray<NSString *> * _Nonnull)typesNamed;
/// Prepare function pointer that will trace an individual function.
+ (void (* _Nullable)(void))traceWithName:(NSString * _Nonnull)signature vtableSlot:(void (* _Nonnull * _Nullable)(void))vtableSlot objcMethod:(Method _Nullable)objcMethod objcClass:(Class _Nullable)objcClass original:(void const * _Nonnull)original SWIFT_WARN_UNUSED_RESULT;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
